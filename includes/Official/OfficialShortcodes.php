<?php

namespace Minpaku\Official;

use Minpaku\Services\PropertyService;
use Minpaku\Services\AvailabilityService;
use Minpaku\Services\QuoteService;

class OfficialShortcodes {

    private $property_service;
    private $availability_service;
    private $quote_service;

    public function __construct() {
        $this->property_service = new PropertyService();
        $this->availability_service = new AvailabilityService();
        $this->quote_service = new QuoteService();

        add_shortcode('minpaku_calendar', [$this, 'renderCalendarShortcode']);
        add_shortcode('minpaku_quote', [$this, 'renderQuoteShortcode']);
        add_shortcode('minpaku_property_info', [$this, 'renderPropertyInfoShortcode']);
        add_shortcode('minpaku_booking_form', [$this, 'renderBookingFormShortcode']);

        add_action('wp_ajax_minpaku_get_availability', [$this, 'handleAvailabilityRequest']);
        add_action('wp_ajax_nopriv_minpaku_get_availability', [$this, 'handleAvailabilityRequest']);
        add_action('wp_ajax_minpaku_submit_quote', [$this, 'handleQuoteSubmission']);
        add_action('wp_ajax_nopriv_minpaku_submit_quote', [$this, 'handleQuoteSubmission']);
    }

    public function renderCalendarShortcode($atts) {
        $atts = shortcode_atts([
            'property_id' => 0,
            'months' => 2,
            'theme' => 'default',
            'show_prices' => true,
            'show_legend' => true,
            'min_stay' => null,
            'max_stay' => null
        ], $atts, 'minpaku_calendar');

        $property_id = intval($atts['property_id']);

        if (!$property_id || get_post_type($property_id) !== 'minpaku_property') {
            return '<p class="error">' . __('Invalid property ID for calendar.', 'minpaku-suite') . '</p>';
        }

        $property = get_post($property_id);
        if (!$property) {
            return '<p class="error">' . __('Property not found.', 'minpaku-suite') . '</p>';
        }

        $min_stay = $atts['min_stay'] ?: get_post_meta($property_id, '_minpaku_min_stay', true) ?: 1;
        $max_stay = $atts['max_stay'] ?: get_post_meta($property_id, '_minpaku_max_stay', true) ?: 30;
        $price_per_night = get_post_meta($property_id, '_minpaku_price_per_night', true);

        ob_start();
        ?>
        <div class="minpaku-calendar-shortcode" data-property-id="<?php echo $property_id; ?>">
            <div class="calendar-header">
                <h3 class="calendar-title"><?php _e('Availability Calendar', 'minpaku-suite'); ?></h3>
                <div class="calendar-controls">
                    <button class="calendar-nav-btn" id="calendarPrev" data-direction="prev">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"/>
                        </svg>
                        <?php _e('Previous', 'minpaku-suite'); ?>
                    </button>
                    <span class="current-month-display" id="currentMonthDisplay"></span>
                    <button class="calendar-nav-btn" id="calendarNext" data-direction="next">
                        <?php _e('Next', 'minpaku-suite'); ?>
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"/>
                        </svg>
                    </button>
                </div>
            </div>

            <div class="calendar-grid-container" id="calendarGridContainer">
                <!-- Calendar grids will be generated by JavaScript -->
            </div>

            <?php if ($atts['show_legend']): ?>
                <div class="calendar-legend">
                    <div class="legend-items">
                        <div class="legend-item">
                            <span class="legend-color available"></span>
                            <span class="legend-text"><?php _e('Available', 'minpaku-suite'); ?></span>
                        </div>
                        <div class="legend-item">
                            <span class="legend-color booked"></span>
                            <span class="legend-text"><?php _e('Booked', 'minpaku-suite'); ?></span>
                        </div>
                        <div class="legend-item">
                            <span class="legend-color blocked"></span>
                            <span class="legend-text"><?php _e('Blocked', 'minpaku-suite'); ?></span>
                        </div>
                        <div class="legend-item">
                            <span class="legend-color selected"></span>
                            <span class="legend-text"><?php _e('Selected', 'minpaku-suite'); ?></span>
                        </div>
                    </div>
                </div>
            <?php endif; ?>

            <div class="calendar-selection-info" id="selectionInfo" style="display: none;">
                <div class="selection-summary">
                    <h4><?php _e('Selected Dates', 'minpaku-suite'); ?></h4>
                    <div class="selection-details">
                        <div class="selection-item">
                            <span class="label"><?php _e('Check-in:', 'minpaku-suite'); ?></span>
                            <span class="value" id="selectedCheckIn">-</span>
                        </div>
                        <div class="selection-item">
                            <span class="label"><?php _e('Check-out:', 'minpaku-suite'); ?></span>
                            <span class="value" id="selectedCheckOut">-</span>
                        </div>
                        <div class="selection-item">
                            <span class="label"><?php _e('Nights:', 'minpaku-suite'); ?></span>
                            <span class="value" id="selectedNights">0</span>
                        </div>
                        <?php if ($atts['show_prices'] && $price_per_night): ?>
                            <div class="selection-item total">
                                <span class="label"><?php _e('Estimated Total:', 'minpaku-suite'); ?></span>
                                <span class="value" id="estimatedTotal">Â¥0</span>
                            </div>
                        <?php endif; ?>
                    </div>
                    <div class="selection-actions">
                        <button class="btn btn-secondary" id="clearSelection"><?php _e('Clear', 'minpaku-suite'); ?></button>
                        <button class="btn btn-primary" id="proceedToQuote"><?php _e('Get Quote', 'minpaku-suite'); ?></button>
                    </div>
                </div>
            </div>
        </div>

        <style>
        .minpaku-calendar-shortcode {
            max-width: 800px;
            margin: 0 auto;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        }

        .calendar-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
            flex-wrap: wrap;
            gap: 1rem;
        }

        .calendar-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: #333;
            margin: 0;
        }

        .calendar-controls {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .calendar-nav-btn {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem 1rem;
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 6px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 0.9rem;
            font-weight: 500;
        }

        .calendar-nav-btn:hover {
            background: #e9ecef;
            transform: translateY(-1px);
        }

        .current-month-display {
            font-weight: 600;
            color: #333;
            min-width: 120px;
            text-align: center;
        }

        .calendar-grid-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 2rem;
            margin-bottom: 2rem;
        }

        .calendar-month {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        .calendar-month-header {
            background: #ff6b6b;
            color: white;
            padding: 1rem;
            text-align: center;
            font-weight: 600;
            font-size: 1.1rem;
        }

        .calendar-month-grid {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
        }

        .calendar-day-header {
            padding: 0.75rem 0.5rem;
            background: #f8f9fa;
            text-align: center;
            font-weight: 600;
            font-size: 0.8rem;
            color: #666;
            border-bottom: 1px solid #e9ecef;
        }

        .calendar-day {
            aspect-ratio: 1;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            border: 1px solid #f0f0f0;
            position: relative;
            font-size: 0.9rem;
        }

        .calendar-day:hover {
            background: #f0f8f8;
        }

        .calendar-day.other-month {
            color: #ccc;
            cursor: not-allowed;
        }

        .calendar-day.available {
            background: #e8f5e8;
            color: #2d5a2d;
        }

        .calendar-day.booked {
            background: #ffe6e6;
            color: #8b0000;
            cursor: not-allowed;
        }

        .calendar-day.blocked {
            background: #f0f0f0;
            color: #666;
            cursor: not-allowed;
        }

        .calendar-day.selected {
            background: #ff6b6b;
            color: white;
        }

        .calendar-day.in-range {
            background: #ffe6e6;
            color: #333;
        }

        .calendar-day.today {
            font-weight: bold;
            box-shadow: inset 0 0 0 2px #ff6b6b;
        }

        .calendar-legend {
            display: flex;
            justify-content: center;
            margin-bottom: 2rem;
        }

        .legend-items {
            display: flex;
            gap: 1.5rem;
            flex-wrap: wrap;
        }

        .legend-item {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 0.9rem;
        }

        .legend-color {
            width: 16px;
            height: 16px;
            border-radius: 4px;
            flex-shrink: 0;
        }

        .legend-color.available { background: #e8f5e8; }
        .legend-color.booked { background: #ffe6e6; }
        .legend-color.blocked { background: #f0f0f0; }
        .legend-color.selected { background: #ff6b6b; }

        .calendar-selection-info {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 1.5rem;
            border: 2px solid #ff6b6b;
        }

        .selection-summary h4 {
            margin: 0 0 1rem 0;
            color: #333;
            font-size: 1.1rem;
        }

        .selection-details {
            margin-bottom: 1.5rem;
        }

        .selection-item {
            display: flex;
            justify-content: space-between;
            padding: 0.5rem 0;
            border-bottom: 1px solid #e9ecef;
        }

        .selection-item:last-child {
            border-bottom: none;
        }

        .selection-item.total {
            font-weight: 600;
            border-top: 2px solid #ff6b6b;
            margin-top: 0.5rem;
            padding-top: 1rem;
        }

        .selection-item .label {
            color: #666;
            font-size: 0.9rem;
        }

        .selection-item .value {
            font-weight: 600;
            color: #333;
        }

        .selection-actions {
            display: flex;
            gap: 1rem;
            justify-content: center;
        }

        .btn {
            padding: 0.75rem 1.5rem;
            border-radius: 6px;
            border: none;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .btn-primary {
            background: #ff6b6b;
            color: white;
        }

        .btn-primary:hover {
            background: #ff5252;
            transform: translateY(-1px);
        }

        .btn-secondary {
            background: #6c757d;
            color: white;
        }

        .btn-secondary:hover {
            background: #5a6268;
        }

        @media (max-width: 768px) {
            .calendar-header {
                flex-direction: column;
                text-align: center;
            }

            .calendar-grid-container {
                grid-template-columns: 1fr;
            }

            .legend-items {
                justify-content: center;
            }

            .selection-actions {
                flex-direction: column;
            }
        }
        </style>

        <script>
        document.addEventListener('DOMContentLoaded', function() {
            const calendarContainer = document.querySelector('[data-property-id="<?php echo $property_id; ?>"]');
            if (!calendarContainer) return;

            const propertyId = <?php echo $property_id; ?>;
            const monthsToShow = <?php echo intval($atts['months']); ?>;
            const minStay = <?php echo intval($min_stay); ?>;
            const maxStay = <?php echo intval($max_stay); ?>;
            const pricePerNight = <?php echo $price_per_night ? intval($price_per_night) : 0; ?>;
            const showPrices = <?php echo $atts['show_prices'] ? 'true' : 'false'; ?>;

            let currentStartDate = new Date();
            let selectedCheckIn = null;
            let selectedCheckOut = null;
            let availabilityData = {};

            const elements = {
                gridContainer: calendarContainer.querySelector('#calendarGridContainer'),
                monthDisplay: calendarContainer.querySelector('#currentMonthDisplay'),
                prevBtn: calendarContainer.querySelector('#calendarPrev'),
                nextBtn: calendarContainer.querySelector('#calendarNext'),
                selectionInfo: calendarContainer.querySelector('#selectionInfo'),
                checkInDisplay: calendarContainer.querySelector('#selectedCheckIn'),
                checkOutDisplay: calendarContainer.querySelector('#selectedCheckOut'),
                nightsDisplay: calendarContainer.querySelector('#selectedNights'),
                totalDisplay: calendarContainer.querySelector('#estimatedTotal'),
                clearBtn: calendarContainer.querySelector('#clearSelection'),
                quoteBtn: calendarContainer.querySelector('#proceedToQuote')
            };

            function generateCalendar() {
                elements.gridContainer.innerHTML = '';

                const monthNames = minpakuOfficial.i18n.months;
                const dayNames = minpakuOfficial.i18n.daysShort;

                for (let i = 0; i < monthsToShow; i++) {
                    const monthDate = new Date(currentStartDate.getFullYear(), currentStartDate.getMonth() + i, 1);
                    const monthContainer = createMonthGrid(monthDate, monthNames, dayNames);
                    elements.gridContainer.appendChild(monthContainer);
                }

                updateMonthDisplay();
                loadAvailabilityData();
            }

            function createMonthGrid(monthDate, monthNames, dayNames) {
                const year = monthDate.getFullYear();
                const month = monthDate.getMonth();
                const firstDay = new Date(year, month, 1);
                const lastDay = new Date(year, month + 1, 0);
                const today = new Date();
                today.setHours(0, 0, 0, 0);

                const monthContainer = document.createElement('div');
                monthContainer.className = 'calendar-month';

                const monthHeader = document.createElement('div');
                monthHeader.className = 'calendar-month-header';
                monthHeader.textContent = `${monthNames[month]} ${year}`;

                const monthGrid = document.createElement('div');
                monthGrid.className = 'calendar-month-grid';

                // Add day headers
                dayNames.forEach(dayName => {
                    const dayHeader = document.createElement('div');
                    dayHeader.className = 'calendar-day-header';
                    dayHeader.textContent = dayName;
                    monthGrid.appendChild(dayHeader);
                });

                // Add empty cells for days before month starts
                const startPadding = firstDay.getDay();
                for (let i = 0; i < startPadding; i++) {
                    const emptyDay = document.createElement('div');
                    emptyDay.className = 'calendar-day other-month';
                    monthGrid.appendChild(emptyDay);
                }

                // Add days of the month
                for (let day = 1; day <= lastDay.getDate(); day++) {
                    const date = new Date(year, month, day);
                    const dateString = formatDate(date);

                    const dayElement = document.createElement('div');
                    dayElement.className = 'calendar-day';
                    dayElement.textContent = day;
                    dayElement.dataset.date = dateString;

                    if (date.getTime() === today.getTime()) {
                        dayElement.classList.add('today');
                    }

                    if (date < today) {
                        dayElement.classList.add('other-month');
                    } else {
                        dayElement.classList.add('available');
                        dayElement.addEventListener('click', () => selectDate(date));
                    }

                    monthGrid.appendChild(dayElement);
                }

                monthContainer.appendChild(monthHeader);
                monthContainer.appendChild(monthGrid);

                return monthContainer;
            }

            function formatDate(date) {
                return date.getFullYear() + '-' +
                       String(date.getMonth() + 1).padStart(2, '0') + '-' +
                       String(date.getDate()).padStart(2, '0');
            }

            function selectDate(date) {
                if (!selectedCheckIn || (selectedCheckIn && selectedCheckOut)) {
                    selectedCheckIn = date;
                    selectedCheckOut = null;
                } else if (date > selectedCheckIn) {
                    selectedCheckOut = date;
                } else {
                    selectedCheckIn = date;
                    selectedCheckOut = null;
                }

                updateCalendarDisplay();
                updateSelectionDisplay();
            }

            function updateCalendarDisplay() {
                const dayElements = elements.gridContainer.querySelectorAll('.calendar-day');

                dayElements.forEach(dayElement => {
                    dayElement.classList.remove('selected', 'in-range');

                    const dateString = dayElement.dataset.date;
                    if (!dateString) return;

                    const date = new Date(dateString);

                    if (selectedCheckIn && formatDate(selectedCheckIn) === dateString) {
                        dayElement.classList.add('selected');
                    }

                    if (selectedCheckOut && formatDate(selectedCheckOut) === dateString) {
                        dayElement.classList.add('selected');
                    }

                    if (selectedCheckIn && selectedCheckOut && date > selectedCheckIn && date < selectedCheckOut) {
                        dayElement.classList.add('in-range');
                    }
                });
            }

            function updateSelectionDisplay() {
                if (selectedCheckIn) {
                    elements.checkInDisplay.textContent = selectedCheckIn.toLocaleDateString();

                    if (selectedCheckOut) {
                        elements.checkOutDisplay.textContent = selectedCheckOut.toLocaleDateString();
                        const nights = Math.ceil((selectedCheckOut - selectedCheckIn) / (1000 * 60 * 60 * 24));
                        elements.nightsDisplay.textContent = nights;

                        if (showPrices && pricePerNight > 0) {
                            const total = nights * pricePerNight;
                            elements.totalDisplay.textContent = 'Â¥' + total.toLocaleString();
                        }

                        elements.selectionInfo.style.display = 'block';
                    } else {
                        elements.checkOutDisplay.textContent = '-';
                        elements.nightsDisplay.textContent = '0';
                        elements.totalDisplay.textContent = 'Â¥0';
                    }
                } else {
                    elements.selectionInfo.style.display = 'none';
                }
            }

            function updateMonthDisplay() {
                const monthNames = minpakuOfficial.i18n.months;
                const startMonth = monthNames[currentStartDate.getMonth()];
                const endDate = new Date(currentStartDate.getFullYear(), currentStartDate.getMonth() + monthsToShow - 1, 1);
                const endMonth = monthNames[endDate.getMonth()];

                if (currentStartDate.getFullYear() === endDate.getFullYear()) {
                    elements.monthDisplay.textContent = `${startMonth} - ${endMonth} ${currentStartDate.getFullYear()}`;
                } else {
                    elements.monthDisplay.textContent = `${startMonth} ${currentStartDate.getFullYear()} - ${endMonth} ${endDate.getFullYear()}`;
                }
            }

            function loadAvailabilityData() {
                // In a real implementation, this would fetch availability from the server
                // For now, we'll use placeholder data
            }

            function clearSelection() {
                selectedCheckIn = null;
                selectedCheckOut = null;
                updateCalendarDisplay();
                updateSelectionDisplay();
            }

            // Event listeners
            elements.prevBtn.addEventListener('click', () => {
                currentStartDate.setMonth(currentStartDate.getMonth() - 1);
                generateCalendar();
            });

            elements.nextBtn.addEventListener('click', () => {
                currentStartDate.setMonth(currentStartDate.getMonth() + 1);
                generateCalendar();
            });

            elements.clearBtn.addEventListener('click', clearSelection);

            elements.quoteBtn.addEventListener('click', () => {
                if (selectedCheckIn && selectedCheckOut) {
                    // Trigger quote form or navigate to quote section
                    const event = new CustomEvent('minpaku:dates-selected', {
                        detail: {
                            propertyId: propertyId,
                            checkIn: selectedCheckIn,
                            checkOut: selectedCheckOut,
                            nights: Math.ceil((selectedCheckOut - selectedCheckIn) / (1000 * 60 * 60 * 24))
                        }
                    });
                    document.dispatchEvent(event);

                    // Try to scroll to quote section
                    const quoteSection = document.querySelector('#quote, [data-section="quote"]');
                    if (quoteSection) {
                        quoteSection.scrollIntoView({ behavior: 'smooth' });
                    }
                }
            });

            // Initialize
            generateCalendar();
        });
        </script>
        <?php

        return ob_get_clean();
    }

    public function renderQuoteShortcode($atts) {
        $atts = shortcode_atts([
            'property_id' => 0,
            'theme' => 'default',
            'show_calendar_integration' => true,
            'required_fields' => 'name,email,checkin,checkout',
            'success_message' => '',
            'redirect_url' => ''
        ], $atts, 'minpaku_quote');

        $property_id = intval($atts['property_id']);

        if (!$property_id || get_post_type($property_id) !== 'minpaku_property') {
            return '<p class="error">' . __('Invalid property ID for quote form.', 'minpaku-suite') . '</p>';
        }

        $required_fields = array_map('trim', explode(',', $atts['required_fields']));

        ob_start();
        ?>
        <div class="minpaku-quote-shortcode" data-property-id="<?php echo $property_id; ?>">
            <form class="quote-form" id="minpakuQuoteForm" method="post">
                <?php wp_nonce_field('minpaku_quote_submission', 'quote_nonce'); ?>
                <input type="hidden" name="property_id" value="<?php echo $property_id; ?>">

                <div class="form-group">
                    <label for="quote_name" class="form-label">
                        <?php _e('Full Name', 'minpaku-suite'); ?>
                        <?php if (in_array('name', $required_fields)): ?><span class="required">*</span><?php endif; ?>
                    </label>
                    <input type="text" id="quote_name" name="name" class="form-control"
                           <?php echo in_array('name', $required_fields) ? 'required' : ''; ?>>
                </div>

                <div class="form-group">
                    <label for="quote_email" class="form-label">
                        <?php _e('Email Address', 'minpaku-suite'); ?>
                        <?php if (in_array('email', $required_fields)): ?><span class="required">*</span><?php endif; ?>
                    </label>
                    <input type="email" id="quote_email" name="email" class="form-control"
                           <?php echo in_array('email', $required_fields) ? 'required' : ''; ?>>
                </div>

                <div class="form-group">
                    <label for="quote_phone" class="form-label">
                        <?php _e('Phone Number', 'minpaku-suite'); ?>
                        <?php if (in_array('phone', $required_fields)): ?><span class="required">*</span><?php endif; ?>
                    </label>
                    <input type="tel" id="quote_phone" name="phone" class="form-control"
                           <?php echo in_array('phone', $required_fields) ? 'required' : ''; ?>>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label for="quote_checkin" class="form-label">
                            <?php _e('Check-in Date', 'minpaku-suite'); ?>
                            <?php if (in_array('checkin', $required_fields)): ?><span class="required">*</span><?php endif; ?>
                        </label>
                        <input type="date" id="quote_checkin" name="checkin" class="form-control"
                               min="<?php echo date('Y-m-d'); ?>"
                               <?php echo in_array('checkin', $required_fields) ? 'required' : ''; ?>>
                    </div>

                    <div class="form-group">
                        <label for="quote_checkout" class="form-label">
                            <?php _e('Check-out Date', 'minpaku-suite'); ?>
                            <?php if (in_array('checkout', $required_fields)): ?><span class="required">*</span><?php endif; ?>
                        </label>
                        <input type="date" id="quote_checkout" name="checkout" class="form-control"
                               min="<?php echo date('Y-m-d', strtotime('+1 day')); ?>"
                               <?php echo in_array('checkout', $required_fields) ? 'required' : ''; ?>>
                    </div>
                </div>

                <div class="form-group">
                    <label for="quote_guests" class="form-label">
                        <?php _e('Number of Guests', 'minpaku-suite'); ?>
                        <?php if (in_array('guests', $required_fields)): ?><span class="required">*</span><?php endif; ?>
                    </label>
                    <select id="quote_guests" name="guests" class="form-control"
                            <?php echo in_array('guests', $required_fields) ? 'required' : ''; ?>>
                        <option value=""><?php _e('Select number of guests', 'minpaku-suite'); ?></option>
                        <?php for ($i = 1; $i <= 20; $i++): ?>
                            <option value="<?php echo $i; ?>"><?php echo $i; ?> <?php echo _n('guest', 'guests', $i, 'minpaku-suite'); ?></option>
                        <?php endfor; ?>
                    </select>
                </div>

                <div class="form-group">
                    <label for="quote_message" class="form-label">
                        <?php _e('Special Requests or Message', 'minpaku-suite'); ?>
                        <?php if (in_array('message', $required_fields)): ?><span class="required">*</span><?php endif; ?>
                    </label>
                    <textarea id="quote_message" name="message" class="form-control" rows="4"
                              placeholder="<?php esc_attr_e('Please let us know if you have any special requests or questions...', 'minpaku-suite'); ?>"
                              <?php echo in_array('message', $required_fields) ? 'required' : ''; ?>></textarea>
                </div>

                <div class="form-actions">
                    <button type="submit" class="btn btn-primary" id="submitQuote">
                        <span class="btn-text"><?php _e('Request Quote', 'minpaku-suite'); ?></span>
                        <span class="btn-spinner" style="display: none;">
                            <svg class="loading-spinner" width="20" height="20" viewBox="0 0 24 24">
                                <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2" fill="none" stroke-dasharray="60" stroke-dashoffset="60" opacity="0.3"/>
                                <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2" fill="none" stroke-dasharray="15" stroke-dashoffset="15">
                                    <animateTransform attributeName="transform" type="rotate" values="0 12 12;360 12 12" dur="1s" repeatCount="indefinite"/>
                                </circle>
                            </svg>
                        </span>
                    </button>
                </div>

                <div class="form-message" id="quoteFormMessage" style="display: none;"></div>
            </form>
        </div>

        <style>
        .minpaku-quote-shortcode {
            max-width: 600px;
            margin: 0 auto;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        }

        .quote-form {
            background: white;
            padding: 2rem;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
        }

        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 600;
            color: #333;
            font-size: 0.95rem;
        }

        .required {
            color: #dc3545;
            margin-left: 2px;
        }

        .form-control {
            width: 100%;
            padding: 0.75rem;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            font-size: 1rem;
            transition: border-color 0.3s ease, box-shadow 0.3s ease;
        }

        .form-control:focus {
            outline: none;
            border-color: #ff6b6b;
            box-shadow: 0 0 0 3px rgba(255, 107, 107, 0.1);
        }

        .form-control.error {
            border-color: #dc3545;
            box-shadow: 0 0 0 3px rgba(220, 53, 69, 0.1);
        }

        .form-actions {
            margin-top: 2rem;
            text-align: center;
        }

        .btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            padding: 1rem 2rem;
            border: none;
            border-radius: 8px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            min-width: 180px;
        }

        .btn-primary {
            background: linear-gradient(135deg, #ff6b6b, #ff8e53);
            color: white;
        }

        .btn-primary:hover:not(:disabled) {
            background: linear-gradient(135deg, #ff5252, #ff7043);
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(255, 107, 107, 0.3);
        }

        .btn:disabled {
            opacity: 0.7;
            cursor: not-allowed;
            transform: none;
        }

        .form-message {
            margin-top: 1.5rem;
            padding: 1rem;
            border-radius: 8px;
            font-weight: 500;
        }

        .form-message.success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .form-message.error {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .loading-spinner {
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }

        @media (max-width: 768px) {
            .quote-form {
                padding: 1.5rem;
            }

            .form-row {
                grid-template-columns: 1fr;
            }

            .btn {
                width: 100%;
            }
        }
        </style>

        <script>
        document.addEventListener('DOMContentLoaded', function() {
            const quoteForm = document.getElementById('minpakuQuoteForm');
            const submitBtn = document.getElementById('submitQuote');
            const messageDiv = document.getElementById('quoteFormMessage');
            const btnText = submitBtn.querySelector('.btn-text');
            const btnSpinner = submitBtn.querySelector('.btn-spinner');

            // Listen for calendar date selection
            document.addEventListener('minpaku:dates-selected', function(e) {
                const { checkIn, checkOut } = e.detail;

                const checkinInput = document.getElementById('quote_checkin');
                const checkoutInput = document.getElementById('quote_checkout');

                if (checkinInput && checkIn) {
                    checkinInput.value = checkIn.toISOString().split('T')[0];
                }

                if (checkoutInput && checkOut) {
                    checkoutInput.value = checkOut.toISOString().split('T')[0];
                }
            });

            // Auto-populate from URL parameters
            const urlParams = new URLSearchParams(window.location.search);
            if (urlParams.get('checkin')) {
                document.getElementById('quote_checkin').value = urlParams.get('checkin');
            }
            if (urlParams.get('checkout')) {
                document.getElementById('quote_checkout').value = urlParams.get('checkout');
            }

            // Date validation
            const checkinInput = document.getElementById('quote_checkin');
            const checkoutInput = document.getElementById('quote_checkout');

            checkinInput.addEventListener('change', function() {
                const checkinDate = new Date(this.value);
                const minCheckout = new Date(checkinDate);
                minCheckout.setDate(minCheckout.getDate() + 1);

                checkoutInput.min = minCheckout.toISOString().split('T')[0];

                if (checkoutInput.value && new Date(checkoutInput.value) <= checkinDate) {
                    checkoutInput.value = minCheckout.toISOString().split('T')[0];
                }
            });

            // Form submission
            quoteForm.addEventListener('submit', function(e) {
                e.preventDefault();

                if (submitBtn.disabled) return;

                // Show loading state
                submitBtn.disabled = true;
                btnText.style.display = 'none';
                btnSpinner.style.display = 'inline-flex';

                const formData = new FormData(this);
                formData.append('action', 'minpaku_submit_quote');

                fetch(minpakuOfficial.ajaxUrl, {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    showMessage(data.data.message, data.success ? 'success' : 'error');

                    if (data.success) {
                        quoteForm.reset();

                        // Redirect if specified
                        const redirectUrl = '<?php echo esc_js($atts['redirect_url']); ?>';
                        if (redirectUrl) {
                            setTimeout(() => {
                                window.location.href = redirectUrl;
                            }, 2000);
                        }
                    }
                })
                .catch(error => {
                    console.error('Quote submission error:', error);
                    showMessage(minpakuOfficial.i18n.error, 'error');
                })
                .finally(() => {
                    // Hide loading state
                    submitBtn.disabled = false;
                    btnText.style.display = 'inline';
                    btnSpinner.style.display = 'none';
                });
            });

            function showMessage(message, type) {
                messageDiv.textContent = message;
                messageDiv.className = `form-message ${type}`;
                messageDiv.style.display = 'block';

                // Auto-hide success messages
                if (type === 'success') {
                    setTimeout(() => {
                        messageDiv.style.display = 'none';
                    }, 5000);
                }
            }
        });
        </script>
        <?php

        return ob_get_clean();
    }

    public function renderPropertyInfoShortcode($atts) {
        $atts = shortcode_atts([
            'property_id' => 0,
            'fields' => 'title,location,capacity,bedrooms,bathrooms',
            'layout' => 'horizontal'
        ], $atts, 'minpaku_property_info');

        $property_id = intval($atts['property_id']);

        if (!$property_id || get_post_type($property_id) !== 'minpaku_property') {
            return '<p class="error">' . __('Invalid property ID.', 'minpaku-suite') . '</p>';
        }

        $fields = array_map('trim', explode(',', $atts['fields']));
        $property = get_post($property_id);

        ob_start();
        ?>
        <div class="minpaku-property-info layout-<?php echo esc_attr($atts['layout']); ?>">
            <?php foreach ($fields as $field): ?>
                <?php echo $this->renderPropertyField($property_id, $field); ?>
            <?php endforeach; ?>
        </div>
        <?php

        return ob_get_clean();
    }

    public function renderBookingFormShortcode($atts) {
        $atts = shortcode_atts([
            'property_id' => 0,
            'style' => 'compact',
            'show_calendar' => true,
            'show_quote' => true
        ], $atts, 'minpaku_booking_form');

        $property_id = intval($atts['property_id']);

        if (!$property_id || get_post_type($property_id) !== 'minpaku_property') {
            return '<p class="error">' . __('Invalid property ID.', 'minpaku-suite') . '</p>';
        }

        ob_start();
        ?>
        <div class="minpaku-booking-form-shortcode">
            <?php if ($atts['show_calendar']): ?>
                <div class="booking-section">
                    <h3><?php _e('Select Your Dates', 'minpaku-suite'); ?></h3>
                    <?php echo $this->renderCalendarShortcode(['property_id' => $property_id, 'months' => 1]); ?>
                </div>
            <?php endif; ?>

            <?php if ($atts['show_quote']): ?>
                <div class="booking-section">
                    <h3><?php _e('Request Quote', 'minpaku-suite'); ?></h3>
                    <?php echo $this->renderQuoteShortcode(['property_id' => $property_id]); ?>
                </div>
            <?php endif; ?>
        </div>
        <?php

        return ob_get_clean();
    }

    private function renderPropertyField($property_id, $field) {
        $value = '';
        $label = '';

        switch ($field) {
            case 'title':
                $value = get_the_title($property_id);
                $label = __('Property Name', 'minpaku-suite');
                break;
            case 'location':
                $value = get_post_meta($property_id, '_minpaku_location', true);
                $label = __('Location', 'minpaku-suite');
                break;
            case 'capacity':
                $value = get_post_meta($property_id, '_minpaku_capacity', true);
                $label = __('Capacity', 'minpaku-suite');
                if ($value) $value .= ' ' . _n('guest', 'guests', intval($value), 'minpaku-suite');
                break;
            case 'bedrooms':
                $value = get_post_meta($property_id, '_minpaku_bedrooms', true);
                $label = __('Bedrooms', 'minpaku-suite');
                break;
            case 'bathrooms':
                $value = get_post_meta($property_id, '_minpaku_bathrooms', true);
                $label = __('Bathrooms', 'minpaku-suite');
                break;
            case 'price':
                $value = get_post_meta($property_id, '_minpaku_price_per_night', true);
                $label = __('Price per Night', 'minpaku-suite');
                if ($value) $value = 'Â¥' . number_format(intval($value));
                break;
        }

        if (empty($value)) {
            return '';
        }

        return sprintf(
            '<div class="property-info-item property-info-%s"><span class="info-label">%s:</span> <span class="info-value">%s</span></div>',
            esc_attr($field),
            esc_html($label),
            esc_html($value)
        );
    }

    public function handleAvailabilityRequest() {
        check_ajax_referer('minpaku_official_nonce', 'nonce');

        $property_id = intval($_POST['property_id']);
        $start_date = sanitize_text_field($_POST['start_date']);
        $end_date = sanitize_text_field($_POST['end_date']);

        if (!$property_id || get_post_type($property_id) !== 'minpaku_property') {
            wp_send_json_error(['message' => __('Invalid property ID.', 'minpaku-suite')]);
        }

        try {
            $availability = $this->availability_service->getAvailability($property_id, $start_date, $end_date);
            wp_send_json_success(['availability' => $availability]);
        } catch (Exception $e) {
            wp_send_json_error(['message' => $e->getMessage()]);
        }
    }

    public function handleQuoteSubmission() {
        check_ajax_referer('minpaku_quote_submission', 'quote_nonce');

        $property_id = intval($_POST['property_id']);

        if (!$property_id || get_post_type($property_id) !== 'minpaku_property') {
            wp_send_json_error(['message' => __('Invalid property ID.', 'minpaku-suite')]);
        }

        $data = [
            'property_id' => $property_id,
            'name' => sanitize_text_field($_POST['name']),
            'email' => sanitize_email($_POST['email']),
            'phone' => sanitize_text_field($_POST['phone']),
            'checkin' => sanitize_text_field($_POST['checkin']),
            'checkout' => sanitize_text_field($_POST['checkout']),
            'guests' => intval($_POST['guests']),
            'message' => sanitize_textarea_field($_POST['message'])
        ];

        try {
            $quote_id = $this->quote_service->createQuote($data);

            $success_message = __('Your quote request has been submitted successfully. We will contact you soon with a personalized quote.', 'minpaku-suite');

            do_action('minpaku_quote_submitted', $quote_id, $data);

            wp_send_json_success(['message' => $success_message, 'quote_id' => $quote_id]);
        } catch (Exception $e) {
            wp_send_json_error(['message' => $e->getMessage()]);
        }
    }
}